FixedThreadPool v0.1

Подробности реализации:
1. В конструкторе задается фиксированное количество потоков, каждый поток берёт по одной таске из очереди.

2. Очередь (BlockingQueue) содержит таски, которые потоки должны выполнить. BlockingQueue обеспечивает потокобезопасность и синхронизацию.

3. Метод execute(Runnable runnable) добавляет раннбл таски в очередь для выполнения, таски добавляются в конец очереди.

4. Когда в очереди появляется доступная для выполнения таска, то поток берёт её при помощи queue.take() и начинает её выполнять при помощи task.run().

5. В методе main создается инстанс FixedThreadPool с тремя потоками на борту. Припомощи цикла for создаем 5 тасок и потоки выполняют их. 


ScalableThreadPool v0.1

Подробности реализации:
1. В конструкторе 4 переменных:
	а. corePoolSize - отвечает за минимальное количество потоков;
	б. maximumPoolSize - отвечает за максимальное количество потоков, которое может быть достигнуто;
	в. taskQueue - очередь, используется для хранения тасок, которые нужно выполнить (под капотом BlockingQueue<Runnable>)
	г. threadCount - служит для отслеживания текущего количества потоков (под капотом AtomicInteger)
	
2. Метод execute(Runnable runnable) добавляет раннбл таски в очередь для выполнения.
Если текущее количество потоков меньше максимально допустимого и при этом задач в очереди больше, чем потоков, то создается новый дополнительный поток.

3. Вложенный класс Worker представляет собой работающий поток. Он работает в цикле, пытаясь получить таску из очереди, если таска есть - выполняет её при помощи task.run(). Если же задач в очереди нет, то он уменьшает количество потоков.

4. В методе main создается инстанс ScalableThreadPool с одним потоком (минимальное количество), количетсов максимальных потоков может составлять 5, в очередь будет добавлено 10 тасок.